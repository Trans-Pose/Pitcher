//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public PitchMovementLerpSpeedComponent pitchMovementLerpSpeed { get { return (PitchMovementLerpSpeedComponent)GetComponent(GameComponentsLookup.PitchMovementLerpSpeed); } }
    public bool hasPitchMovementLerpSpeed { get { return HasComponent(GameComponentsLookup.PitchMovementLerpSpeed); } }

    public void AddPitchMovementLerpSpeed(float newValue) {
        var index = GameComponentsLookup.PitchMovementLerpSpeed;
        var component = (PitchMovementLerpSpeedComponent)CreateComponent(index, typeof(PitchMovementLerpSpeedComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplacePitchMovementLerpSpeed(float newValue) {
        var index = GameComponentsLookup.PitchMovementLerpSpeed;
        var component = (PitchMovementLerpSpeedComponent)CreateComponent(index, typeof(PitchMovementLerpSpeedComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemovePitchMovementLerpSpeed() {
        RemoveComponent(GameComponentsLookup.PitchMovementLerpSpeed);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPitchMovementLerpSpeed;

    public static Entitas.IMatcher<GameEntity> PitchMovementLerpSpeed {
        get {
            if (_matcherPitchMovementLerpSpeed == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.PitchMovementLerpSpeed);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPitchMovementLerpSpeed = matcher;
            }

            return _matcherPitchMovementLerpSpeed;
        }
    }
}
